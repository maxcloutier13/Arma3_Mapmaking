// ---------------------------------------------------------------------------------------------------------
// General Multiplayer Configuration.
// ---------------------------------------------------------------------------------------------------------

author = "[CGQC] Votre nom Ici";                                             
onLoadName = "[CGQC] Opération: Quelque chose";                                                   	
//onLoadMission = "Mission Zeus For CGQC Community";                                                             
//loadScreen = "textures\BG1.paa";
//Texture de loadscreen
loadScreen = "textures\loading_screen_1.paa";
onLoadMission = "<t color='#0080ff' align='left'>Unit A3 : https://units.arma3.com/unit/CGQC<br/>Groupe Steam : https://steamcommunity.com/groups/CGQC<br/>Groupe Facebook : https://www.facebook.com/groups/CGQCP</t>";
briefingName = "[CGQC] Opération Face de Pet";
//Texture overview
overviewPicture = "textures\loading_screen_1.paa";

//Briefing Metis Presentation 
class mts_presentation_topics{
    //Unique name for a separate Presentation
    class cgqc_briefing{
        displayName = "Briefing"; //Displayed name
        path = "textures\briefing" //Relative path from root folder
        name = "briefing" //Name of the image files
        extension = ".paa" //File extension. Can be paa/jpg or ogv movie 
        slides = 6; //Number of slides
    };
};

//Typical mission config
class Header { 
	gameType  =   Zeus ; 	// Type de jeu 
	minPlayers  =   1 ; 	// nombre minimum de joueurs pris en charge par la mission 
	maxPlayers  =  32 ; 	// nombre maximum de joueurs pris en charge par la mission 
} ;

respawn = 3;
respawndelay = 10;
respawnTemplates[] = { "MenuPosition" };
respawnOnStart = -1;
disabledAI = 1;
joinUnassigned = 0;
enableDebugConsole = 1;
allowFunctionsLog = 1;

corpseManagerMode = 1; 						// Type of removed bodies: 0 - none, 1 - all, 2 - only respawnable, 3 - only non-respawnable
corpseLimit = 15; 							// Max number of bodies which can be available at the same time. When exceeded, start deleting immediately.
corpseRemovalMinTime = 300; 				// Minimal time in seconds a body stays in the scene (can't be removed sooner).
corpseRemovalMaxTime = 300; 				// Maximal time in seconds after which a dead body is removed (can't stay longer)

wreckManagerMode = 3; 						// Type of removed wrecks: 0 - none, 1 - all, 2 - only respawnable, 3 - only non-respawnable
wreckLimit = 5; 							// Max number of wrecks which can be available at the same time. When exceeded, start deleting immediately.
wreckRemovalMinTime = 120; 					// Minimal time in seconds a wreck stays in the scene (can't be removed sooner).
wreckRemovalMaxTime = 500;					// Maximal time in seconds after which a wreck is removed (can't stay longer)


// ---------------------------------------------------------------------------------------------------------
class CfgSounds {
    sounds[] = {};
    class fortunate {               //class name can be anything and will be called later{
        name= "fortunate";
        //sound[] = {\sounds\fortunate.ogg, 1, 1.0, 2};  
        sound[] = {"\sounds\fortunate.ogg", 1, 1}; 
        titles[] = {0,"CCR - Fortunate Son"};
        //target | volume | pitch, less = lower & more = higher | Distancetitles[] = {};
    };
    class abierto {               //class name can be anything and will be called later{
        name= "fortunate";
        //sound[] = {\sounds\fortunate.ogg, 1, 1.0, 2};  
        sound[] = {"\sounds\abierto.ogg", 1, 1}; 
        titles[] = {0,"Tommy Guerrero - Abierto"};
        //target | volume | pitch, less = lower & more = higher | Distancetitles[] = {};
    };
};


//#include "modules\grad-fortifications\grad_fortifications.hpp"
#include "CHVD\dialog.hpp"

class CfgFunctions {
    //#include "modules\grad-persistence\cfgFunctions.hpp"
    //#include "modules\grad-fortifications\cfgFunctions.hpp"
    #include "CHVD\CfgFunctions.hpp"
};

class RscTitles {
    //#include "modules\grad-fortifications\dialog\hint\title.hpp"
};

// ---------------------------------------------------------------------------------------------------------
// Grad Persistence Configuration https://github.com/gruppe-adler/grad-persistence/wiki/Configuration
// ---------------------------------------------------------------------------------------------------------

// General Settings

/*class CfgGradPersistence {
    // missionTag = "CGQC_Mission";                   // The tag that everything in this mission will be saved under. Two missions with the same tag will overwrite each other when saving, even on different terrains. One mission can load the data of a different mission, if they are both saved under the same tag.
    loadOnMissionStart = 0;                 // Toggles automatic loading on start of mission. IF (0) Then use ACE Self Interaction to load
    missionWaitCondition = "false";          // Condition before data will be automatically loaded. Also applies to automatic loading of JIP players.
    playerWaitCondition = "false";           // Condition before a player will be loaded. Passed parameters are [unit,side of unit,unit classname,unit roleDescription].
    //-----------------------------------------------------------------

//Objects

    //When saving editor-placed objects, the variable name of an object will be saved and restored on mission load. If an
    //object with the saved variable name already exists, that object will be used instead of spawning a new one. What that
    //means is if you want to save editor objects, but don't want to delete them before your mission is played for the second
    //time, your editor objects must have a variable name assigned! Otherwise a duplicate will be spawned when loading.

    saveUnits = 0;                          // AI units.
    saveVehicles = 0;                       // Vehicles, static weapons, certain objects.
    saveContainers = 0;                     // Containers such as ammo boxes.
    saveStatics = 0;                        // Static objects such as houses, walls, trees, etc. excluding those created with grad-fortifications.
    saveGradFortificationsStatics = 3;      // Static objects that were created with grad-fortifications during mission runtime.

    // (0)disabled, (1)editor-placed objects only, (2)all objects, (3)only objects that were created during the mission (either user placed or by script/module/Zeus),
    //-----------------------------------------------------------------

//Players

    savePlayerInventory = 1;                // Toggles saving of player inventories.
    savePlayerDamage = 0;                   // Toggles saving of player health.
    savePlayerPosition = 1;                 // Toggles saving of player position.
    savePlayerMoney = 0;                    // Toggles saving of player money.

    // (0)disabled, (1)enable,
    //-----------------------------------------------------------------

//Other

    //When saving editor-placed markers or triggers, the variable name of the respective entity will be saved and restored on
    //mission load. If that entity already exists, the existing entity will be used instead of spawning a new one. In order to avoid
    //duplicates when loading the mission, you have to give all markers and triggers that you want to save a variable name!

    //Tasks basically behave the same way. If you create a task with a module in 3den, that task will be overwritten on mission
    //load, if a task with the same ID exists in your save data.

    saveMarkers = 0;                        // 0/1/2/3 - Same as objects: 0 - disabled, 1 - editor-placed, etc. Of user created markers, only those in global channel will be saved.
    saveTasks = 0;                          // 0/1 - Only saves tasks that are assigned globally or to a side.
    saveTriggers = 0;                       // 0/1/2 - 0 to disable, 1 to enable, 2 to enable and re-execute the statements of triggers which have already been activated
    saveTeamAccounts = 0;                   // 0/1 - Toggles saving of shared team money.
    saveTimeAndDate = 0;                    // 0/1 - Toggles saving of time and date.

    //-----------------------------------------------------------------

//Blacklisting

    //You can blacklist objects from being loaded by adding their classnames to the blacklist. This works independent of the
    //object's type (unit / vehicle / container / ...).

    blacklist[] = {
        //ex: "B_Truck_01_mover_F"
    };

    //-----------------------------------------------------------------

//Custom Variables

    // grad_fortifications settings

    class customVariables {
        class gradFortificationsVehicleInventory {
            varName = "grad_fortifications_myFortsHash";
            varNamespace = "vehicle";
            public = 1;
        };
        class gradFortificationsContainerInventory {
            varName = "grad_fortifications_myFortsHash";
            varNamespace = "container";
            public = 1;
        };
        class gradFortificationsPlayerInventory {
            varName = "grad_fortifications_myFortsHash";
            varNamespace = "player";
            public = 1;
        };
        class gradFortificationsUnitInventory {
            varName = "grad_fortifications_myFortsHash";
            varNamespace = "unit";
            public = 1;
        };
    };
};


// ---------------------------------------------------------------------------------------------------------
// Grad Fortifications Configuration (IN-GAME BUILD MODE) https://github.com/gruppe-adler/grad-fortifications/wiki/Configuration
// ---------------------------------------------------------------------------------------------------------

// Configuration

class CfgGradFortifications {
    //General Settings

    boundingBoxSizeFactor = 1;                      // Number - Global size factor of bounding box - smaller means collision detection is less strict
    demolishTimeFactor = 1;                         // Number - Higher means demolitions take longer.
    buildTimeFactor = 1.5;                            // Number - Higher means building takes longer.
    packUpTimeFactor = 1;                           // Number - Higher means packing up takes longer.
    playerInventorySize = 70;                       // Number - Size of the virtual inventory of units.
    vehicleInventorySizeFactor = 1;                 // Number - Size factor for vehicle inventories.
    canDemolishDefault = 1;                         // (1/0) - Can anyone demolish fortifications by default?
    canPackUpDefault = 1;                           // (1/0) - Can fortification owners pack up fortifications by default?
    canStoreInLandVehicles = 1;                     // (1/0) - Can fortifications be stored in land vehicles?
    canStoreInShips = 1;                            // (1/0) - Can fortifications be stored in ships?
    canStoreInHelicopters = 1;                      // (1/0) - Can fortifications be stored in helicopters?
    canStoreInPlanes = 1;                           // (1/0) - Can fortifications be stored in planes?
    canStoreInContainers = 1;                       // (1/0) - Can fortifications be stored in containers (anything with an inventory that's not one of the above)?
    fortificationOwnerType = "SIDE"              // Who owns a fortification? Owner demolishes more quickly and can pack up the fortification. ("BUILDER"/"GROUP"/"SIDE")
    onPlaceStart = ""                               // Code that is executed when unit starts placement. Local to unit. Passed: [unit,fort class name,local fort object]
    onPlaceCancel = ""                              // Code that is executed when unit cancels placement. Local to unit. Passed: [unit,fort class name,local fort object]
    onBuildStart = ""                               // Code that is executed when unit starts building. Local to unit. Passed: [unit,fort class name,local fort object]
    onBuildComplete = ""                            // Code that is executed when unit completes building and server spawns the actual object. Local to server. Passed: [unit,fort object]

    // Fortifications

    canCollide = 0;                                  // (1/0) - Can this fortification be placed while colliding with other objects?
    canDemolish = 1;                                 // (1/0) - Can this fortification be demolished?
    canPackUp = 1;                                   // (1/0) - Can this fortification be packed up and reused?
    canFloat = 1;                                    // (1/0) - Can this fortification be placed while floating?
    canPlaceOnRoad = 1;                              // (1/0) - Can this fortification be placed on roads?
    surfaceNormal = 1;                               // (1/0) - Default setting for surface normal up-vector.
    surfaceNormalForced = 0;                         // (1/0) - If forced, user will be unable to change from default setting.
    boundingBoxOffset = [0,0,0];                     // Offset for bounding box, vector [x,y,z].
    //buildTime =                                   // Sets building time in seconds for this type of fortification. Is affected by (buildTimeFactor).
    //demolitionTime =                              // Sets demolishing time in seconds for this type of fortification. Is affected by (demolishTimeFactor).
    //packUpTime =                                  // Sets pack up time in seconds for this type of fortification. Is affected by (packUpTimeFactor).
    //size =                                        // The size that this fortification takes up in the virtual inventory.
    condition = ""                                  // Custom condition that will be evaluated during placement. Arguments passed are [fortification object, unit that is placing].
    conditionHint = "CAN'T PLACE"                   // Status that will be displayed in GUI when fotification can not be placed because of custom condition.

    //Vehicles

    isStorage = 1;                                  // (1/0) - Can this type of vehicle store fortifications?
    vehicleInventorySize = -1;                      // Sets inventory size of this type of vehicle. If this is set to -1, inventory size is dependent on (ace_cargo_space) value of vehicle.

    // Fortification Exemple Configuration:
/*
    class Fortifications {
        class Land_BagFence_Long_F {
            boundingBoxSize = 1;
            canFloat = 1;
            canCollide = 1;
            size = 3;
            demolitionTime = 10;
        };

        class Land_HBarrier_5_F {
            boundingBoxSize = 0.8;
            surfaceNormal = 0;
            canDemolish = 0;
        };
    };

    class Vehicles {
        class B_Truck_01_box_F {
            isStorage = 1;
            vehicleInventorySize = -1;
        };
    };
    

};*/


// ---------------------------------------------------------------------------------------------------------
// identity
// ---------------------------------------------------------------------------------------------------------

/*
//Audi
class CfgIdentities
{
	class Landry
	{
		face = "WhiteHead_10";
		glasses = "G_EyeProtectors_F";
		name = "Landry";
		nameSound = "Adams";
		pitch = 1.0;
		speaker = "Male01ENG";
	};
};
*/

/*
//Music
class CfgMusic
{
sounds[] = {01,02};
class 01
{
name = "01";
sound[] = {"music\QGTrack3.ogg", db+10, 1.0};
titles[] = {0,""};
};
class 02
{
name = "02";
sound[] = {"music\sound2.ogg", db+10, 1.0};
titles[] = {0,""};
};


};
*/